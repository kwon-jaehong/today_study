import numpy as np
import random
import matplotlib.pyplot as plt
 
np.random.seed(100)
num_data = 50
 
x11 = np.linspace(0.3,0.7,20)
x12 = np.linspace(1.3,1.8,15)
x13 = np.linspace(2.4,3,15)
x1 = np.concatenate((x11,x12,x13),axis=None)
error = np.random.normal(1,0.5,num_data)
x2 = 1.5*x1+2+error
fig = plt.figure(figsize=(7,7))
fig.set_facecolor('white')
plt.scatter(x1, x2, color='k')
plt.show()

temp_list = [[25, 25, 280, 243],
 [354, 25, 293, 243],
 [696, 25, 287, 243],
 [1032, 25, 288, 243],
 [1369, 25, 289, 243],
 [1707, 25, 290, 243],
 [2046, 25, 291, 243],
 [2386, 25, 293, 243],
 [2728, 25, 272, 243],
 [25, 317, 280, 244],
 [354, 317, 293, 244],
 [696, 317, 287, 244],
 [1032, 317, 288, 244],
 [1369, 317, 289, 244],
 [1707, 317, 290, 244],
 [2046, 317, 291, 244],
 [2386, 317, 293, 244],
 [2728, 317, 272, 244],
 [25, 610, 280, 243],
 [354, 610, 293, 243],
 [696, 610, 287, 243],
 [1032, 610, 288, 243],
 [1369, 610, 289, 243],
 [1707, 610, 290, 243],
 [2046, 610, 291, 243],
 [2386, 610, 293, 243],
 [2728, 610, 272, 243],
 [25, 902, 280, 241],
 [354, 902, 293, 241],
 [696, 902, 287, 241],
 [1032, 902, 288, 241],
 [1369, 902, 289, 241],
 [1707, 902, 290, 241],
 [2046, 902, 291, 241],
 [2386, 902, 293, 241],
 [2728, 902, 272, 241],
 [25, 1192, 280, 242],
 [354, 1192, 293, 242],
 [696, 1192, 287, 242],
 [1032, 1192, 288, 242],
 [1369, 1192, 289, 242],
 [1707, 1192, 290, 242],
 [2046, 1192, 291, 242],
 [2386, 1192, 293, 242],
 [2728, 1192, 272, 242],
 [25, 1483, 280, 243],
 [354, 1483, 293, 243],
 [696, 1483, 287, 243],
 [1032, 1483, 288, 243],
 [1369, 1483, 289, 243],
 [1707, 1483, 290, 243],
 [2046, 1483, 291, 243],
 [2386, 1483, 293, 243],
 [2728, 1483, 272, 243],
 [25, 1775, 280, 242],
 [354, 1775, 293, 242],
 [696, 1775, 287, 242],
 [1032, 1775, 288, 242],
 [1369, 1775, 289, 242],
 [1707, 1775, 290, 242],
 [2046, 1775, 291, 242],
 [2386, 1775, 293, 242],
 [2728, 1775, 272, 242],
 [25, 2066, 280, 243],
 [354, 2066, 293, 243],
 [696, 2066, 287, 243],
 [1032, 2066, 288, 243],
 [1369, 2066, 289, 243],
 [1707, 2066, 290, 243],
 [2046, 2066, 291, 243],
 [2386, 2066, 293, 243],
 [2728, 2066, 272, 243],
 [25, 2358, 280, 243],
 [354, 2358, 293, 243],
 [696, 2358, 287, 243],
 [1032, 2358, 288, 243],
 [1369, 2358, 289, 243],
 [1707, 2358, 290, 243],
 [2046, 2358, 291, 243],
 [2386, 2358, 293, 243],
 [2728, 2358, 272, 243],
 [25, 2650, 280, 244],
 [354, 2650, 293, 244],
 [696, 2650, 287, 244],
 [1032, 2650, 288, 244],
 [1369, 2650, 289, 244],
 [1707, 2650, 290, 244],
 [2046, 2650, 291, 244],
 [2386, 2650, 293, 244],
 [2728, 2650, 272, 244],
 [25, 2943, 280, 245],
 [354, 2943, 293, 245],
 [696, 2943, 287, 245],
 [1032, 2943, 288, 245],
 [1369, 2943, 289, 245],
 [1707, 2943, 290, 245],
 [2046, 2943, 291, 245],
 [2386, 2943, 293, 245],
 [2728, 2943, 272, 245],
 [25, 3237, 280, 241],
 [354, 3237, 293, 241],
 [696, 3237, 287, 241],
 [1032, 3237, 288, 241],
 [1369, 3237, 289, 241],
 [1707, 3237, 290, 241],
 [2046, 3237, 291, 241],
 [2386, 3237, 293, 241],
 [2728, 3237, 272, 241],
 [25, 3527, 280, 245],
 [354, 3527, 293, 245],
 [696, 3527, 287, 245],
 [1032, 3527, 288, 245],
 [1369, 3527, 289, 245],
 [1707, 3527, 290, 245],
 [2046, 3527, 291, 245],
 [2386, 3527, 293, 245],
 [2728, 3527, 272, 245],
 [25, 3821, 280, 187],
 [354, 3821, 293, 187],
 [696, 3821, 287, 187],
 [1032, 3821, 288, 187],
 [1369, 3821, 289, 187],
 [1707, 3821, 290, 187],
 [2046, 3821, 291, 187],
 [2386, 3821, 293, 187],
 [2728, 3821, 272, 187],
 [0, 0, 3024, 4032]]



def kmeans_clustering(X, n_clusters, init_center=None, max_iter=10, epsilon=1e-4, random_state=100): 
    # 센터값 초기화
    init_center = None
    if init_center is None:
        random.seed(random_state)
        ## 데이터의 아무 좌표나 가져옴
        idx = random.sample(range(X.shape[0]), n_clusters)
        center = X[idx]
    else:
        center = init_center
    print(center)
    iteration = 1
    labels_history = []  
    center_history = [] 
    

    while(iteration<=max_iter):
        labels = []
        for i in range(0,len(X)):
            data = X[i]
            labels.append(np.argmin([np.linalg.norm(data-x) for x in center]))
        
        labels = np.array(labels)
        ## update centeroids
        next_center = []
        for i in range(n_clusters):
            target_idx = np.where(labels==i)[0]
            center_val = np.mean(X[target_idx])
            next_center.append(center_val)
 
        next_center = np.array(next_center)
        if epsilon:
            # print(next_center,center)
            if np.linalg.norm(next_center-center) <= epsilon:
                break
        center = next_center
        labels_history.append(labels)
        center_history.append(center)
        iteration += 1
    return (labels, iteration, labels_history, center_history)


results = kmeans_clustering(np.array(temp_list)[:,1], 5, None, 100, epsilon=1e-4, 
                           random_state=100)
print(results)

# X = np.stack([x1, x2], axis=1)
 
# init_center= np.array([[2,4],[1,5],[2.5,6]])
# max_iter=50
# epsilon=1e-10
# random_state=101
# n_clusters=3
# results = kmeans_clustering(X, n_clusters, init_center, max_iter, epsilon=1e-4, 
#                            random_state=100)
# labels = results[0]